generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AmazonAdCategory {
  id        Int        @id @default(autoincrement())
  name      String     @unique(map: "name_UNIQUE") @db.VarChar(63)
  createdAt DateTime   @db.Timestamp(2)
  updatedAt DateTime   @db.Timestamp(2)
  ads       AmazonAd[]
}

model AmazonAd {
  id            Int              @id @default(autoincrement())
  asin          String           @unique(map: "asin_UNIQUE") @db.VarChar(63)
  name          String           @db.VarChar(255)
  image         String           @db.VarChar(255)
  categoryId    Int
  createdAt     DateTime         @db.Timestamp(2)
  updatedAt     DateTime         @db.Timestamp(2)
  scrapedAt     DateTime?        @db.Timestamp(2)
  category      AmazonAdCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "amazon_ad_category_id_fk")
  AmazonAdPrice AmazonAdPrice[]

  @@index([categoryId], map: "amazon_ad_category_id_fk_idx")
}

model AmazonAdPrice {
  id        Int      @id @default(autoincrement())
  adId      Int
  countryId Int
  value     Decimal  @db.Decimal(9, 2)
  createdAt DateTime @db.Timestamp(2)
  updatedAt DateTime @db.Timestamp(2)
  ad        AmazonAd @relation(fields: [adId], references: [id], onDelete: Cascade, map: "amazon_ad_price_ad_id_fk")
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade, map: "amazon_ad_price_country_id_fk")
}

model Country {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(63)
  code          String          @db.VarChar(63)
  currencyId    Int
  createdAt     DateTime        @db.Timestamp(2)
  updatedAt     DateTime        @db.Timestamp(2)
  currency      Currency        @relation(fields: [currencyId], references: [id], onDelete: Cascade, map: "country_currency_id_fk")
  AmazonAdPrice AmazonAdPrice[]
}

model Currency {
  id                 Int                    @id @default(autoincrement())
  name               String                 @db.VarChar(63)
  code               String                 @unique(map: "currency_code_UNIQUE") @db.VarChar(63)
  symbol             String                 @db.VarChar(63)
  createdAt          DateTime               @db.Timestamp(2)
  updatedAt          DateTime               @db.Timestamp(2)
  country            Country[]
  exchangeRateSource CurrencyExchangeRate[] @relation("ExchangeRateSource")
  exchangeRateTarget CurrencyExchangeRate[] @relation("ExchangeRateTarget")
}

model CurrencyExchangeRate {
  id        Int      @id @default(autoincrement())
  sourceId  Int
  targetId  Int
  value     Decimal  @db.Decimal(9, 2)
  createdAt DateTime @db.Timestamp(2)
  updatedAt DateTime @db.Timestamp(2)
  source    Currency @relation("ExchangeRateSource", fields: [sourceId], references: [id], onDelete: Cascade, map: "currency_exchange_rate_source_id_fk")
  target    Currency @relation("ExchangeRateTarget", fields: [targetId], references: [id], onDelete: Cascade, map: "currency_exchange_rate_target_id_fk")

  @@unique([sourceId, targetId], map: "unique_exchange_rate_idx")
}

model Log {
  id        Int      @id @default(autoincrement())
  event     String   @db.VarChar(63)
  data      String?  @db.VarChar(1023)
  createdAt DateTime @db.Timestamp(2)
}
